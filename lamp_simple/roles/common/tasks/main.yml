---

- name: get mac name from api
  uri:
    url: https://api.maclookup.app/v2/macs/00:00:00:00:00:00?apiKey=01gvnvrsx8c8gnekxbf8d460jp01gvnvsf9tjmpdbm48bfkkgck3dwfmyiheqpeq
    return_content: true
  register: result
- name: set mac name
  set_fact:
    macname: "{{ result.content | list}}"
    #macname: "{{ result.content | to_json"
- debug:
    #var: "{{ macname | to_json }}"
    var: macname
  loop: "{{ macname | json_query('company[*].name') }}"

- name: Install nginx
  yum: 
    name: nginx 
    state: present

- name: Copy nginx configuration for wordpress
  template: src=default.conf dest=/etc/nginx/conf.d/default.conf
  notify: restart nginx
  
  
- name: Copy shell script
  template: src=loop.sh dest=/home/jorge
  
- name: update loop.sh
  file:
    path: /home/jorge/loop.sh
    #recurse: yes
    mode: '0755'  


- name: insert firewalld rule for nginx
  firewalld: port={{ nginx_port }}/tcp permanent=true state=enabled immediate=yes
  ignore_errors: yes

- name: http service state
  service: 
    name: nginx 
    state: started 
    enabled: yes

- name: id command
  command: id
  register: idr

- debug: msg="{{idr.stdout}}"

- debug: msg="The operating system is {{ ansible_distribution }}"

- name: print variables
  debug:
    msg: "Username: {{ username }}, Home dir: {{ home }}"

- name: Create variable from  /etc/hosts
  command: cat /etc/hosts
  register: hosts_content
- debug: msg="{{hosts_content.stdout}}"

- name: output of var replace
  debug:
    msg: "{{ replace }}"

- name: var replace
  debug:
    msg: "{{ replace | replace('-', '!!!!') }}"


- name: Check if hosts file contains the word "localhost"
  debug:
    msg: "/etc/hosts file contains the word localhost"
  when: hosts_content.stdout.find("localhost") != -1

- name: hosts replace
  debug:
    msg: "{{ hosts_content.stdout | replace('localhost', 'jorge') }}"

- debug:
    msg:
     - "The value of port is {{ port_no }}"
     - "The value of pkg is {{ pkg_name }}"
     - "The value of hostname is {{ inventory_hostname }}"
     - "The value of node name is {{ ansible_hostname }}"
     - "Ansible version is {{ ansible_version }}"


#works from below
- name: Facts
  setup:
- name: Dump
  #delegate_to: localhost
  run_once: true
  copy:
    content: "{{ hostvars[inventory_hostname] | to_nice_json }}"
    dest: /tmp/setup-dump.json

- name: Print all available facts
  ansible.builtin.debug:
    var: ansible_facts

- name: test set fact
  set_fact:
    interfaces_list: "{{ ansible_interfaces | select('match', '^(eth|lo.*|ens)[0-9]+') | list}}"
 #   interface_list: "{{ ansible_interfaces | select('match','lo.*') | list | first }}"
- debug:
    msg: The interface's list on "{{ ansible_hostname }}" is "{{ interfaces_list }}"

#- debug:
#    msg: The interface's list on "{{ ansible_hostname }}" is "{{ interface_list }}"

- debug: msg="The operating system is {{ ansible_distribution }}" 
 
- name: Execute the command only ansibleawx server
  become: yes
  become_user: root 
  shell: "systemctl restart sshd"
  register: mynode
  when: ansible_hostname == 'ansibleawx'
- debug: var=mynode 


- debug:
    msg: "{{ansible_hostname}}"

# Print the Dictionary
- debug:
    msg: "{{ansible_mounts}}"
    
#- name: mount nfs when "{{ansible_hostname}}"
#  shell: "mount -v -t nfs linuxnfs.file.core.windows.net:/linuxnfs/linuxnfs1 /mount/linuxnfs/linuxnfs1 -o vers=4,minorversion=1,sec=sys"
#  when: ansible_hostname == 'rhel77'
#  register: mymnt
# - debug: var=mymnt 

- name: id command
  command: id
  register: idr1

- debug: msg="{{idr1.stdout}}"

- name: create directory
  file:
    path: /mount/linuxnfs/linuxnfs1
    state: directory
    owner: root
    group: root
    mode: 0775
  ignore_errors: yes 
    
    
        

- name: mount nfs when "{{ansible_hostname}}"
  mount:
    src:   192.168.227.233:/mnt/nfs_shares/jorge
    path: /mount/linuxnfs
    opts: rw,sync,hard
    boot: false
    state: mounted
    fstype: nfs
  when: ansible_hostname == 'ansibleawx'
  register: mymnt
- debug: var=mymnt


- debug:
    msg: "*****Mount Point for node {{ansible_hostname}} {{item.mount}} is at {{item.block_used/item.block_total*100}} percent*****"
  loop: "{{ansible_mounts}}"
  when: item.fstype == 'nfs4'

- name: Add jorgetest group
  group:
    name: jorgetest
    gid: 598240
    state: present

- name: Download and untar perl mod
  unarchive:
    src: https://dlcdn.apache.org/perl/mod_perl-2.0.12.tar.gz
    dest: /home/jorge
    remote_src: yes
    creates: /home/jorge/mod_perl-2.0.12
    validate_certs: no
    owner: jorge
    group: jorge
    
- name: update permissions
  file:
    path: /home/jorge/mod_perl-2.0.12
    recurse: yes
    mode: '0755'
  

- name: Disable auto logout part 1
  replace:
    path: /etc/ssh/sshd_config
    regexp: 'ClientAliveInterval'
    replace: '#ClientAliveInterval'
 
- name: Disable auto logout part 2
  replace:
    path: /etc/ssh/sshd_config
    regexp: 'ClientAliveCountMax'
    replace: '#ClientAliveCountMax'


- name: Add jorgetest group
  command: "getent passwd jorge"
  register: getent
- debug: msg="{{getent.stdout}}"

- name: test to see if selinux is running
  command: getenforce
  register: sestatus
  changed_when: true
- debug: msg="{{sestatus.stdout}}"

- name: Create variable from ehhco
  command: "echo Hello"
  register: command_output
- debug: msg="{{command_output.stdout}}"


- name: Create variable from  /etc/hosts
  command: cat /etc/hosts
  register: command_output1
- debug: msg="{{command_output1.stdout}}"




   
